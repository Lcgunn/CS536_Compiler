/**********************************************************************
 Java CUP specification for a parser for base programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INTEGER;
terminal                LOGICAL;
terminal                VOID;
terminal                TUPLE;
terminal                TRUE;
terminal                FALSE;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                LSQBRACKET;
terminal                RSQBRACKET;
terminal                COLON;
terminal                COMMA;
terminal                DOT;
terminal                INPUTOP;
terminal                OUTPUTOP;
terminal                ASSIGN;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                AND;
terminal                OR;
terminal                NOT;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                GREATER;
terminal                GREATEREQ;
terminal                LESS;
terminal                LESSEQ;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                READ;
terminal                WRITE;
terminal                RETURN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal LinkedList       varDeclList;
non terminal FctnDeclNode     fctnDecl;
non terminal FormalDeclNode   formals;
non terminal FormalDeclNode   formalDecl;
non terminal FormalsListNode  formalsList;
non terminal TypeNode         type;
non terminal IdNode           id;
 
 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;

precedence left OR;

precedence left AND;

precedence nonassoc EQUALS, NOTEQUALS, GREATER, GREATEREQ,
LESS, LESSEQ;

precedence left PLUS, PLUSPLUS, MINUS, MINUSMINUS;

precedence left TIMES, DIVIDE;

precedence nonassoc NOT;

precedence left COLON;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | fctnDecl:f
                {: RESULT = f;
                :}
                ;

varDeclList     ::= varDeclList:vl varDecl:value
                {: vl.addLast(v);
                   RESULT = vl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<VarDeclNode>();
                :}
                ;

varDecl         ::= type:t id:i DOT
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NON_TUPLE);
                :}
                ;

fctnDecl        ::= type:t id:i formalsList:fl fctnBody:fb
                {: 
                   RESULT = new FctnDeclNode(t, i, fl, fb);
                :}
                ;

formals         ::= LCURLY RCURLY
                {: RESULT = {};
                :}
                | LCURLY formalsList:fl RCURLY
                {: RESULT = {fl};
                :}
                ;

formalsList     ::= formalDecl:f
                {: RESULT = f;
                :}
                | formalDecl:f COMMA formalsList:fl
                {: RESULT = f, fl;
                :}
                ;

formalDecl      ::= type:t id:i
                {: RESULT = new FormalDeclNode(t, i);
                :}
                ;

fctnBody        ::= LSQBRACKET varDeclList:vl stmtList:sl RSQBRACKET
                {: RESULT = [];
                :}
                ;

type            ::= LOGICAL
                {: RESULT = new LogicalNode();
                :}
                | INTEGER
                {: RESULT = new IntegerNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;
				