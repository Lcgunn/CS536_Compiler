/**********************************************************************
 Java CUP specification for a parser for base programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INTEGER;
terminal                LOGICAL;
terminal                VOID;
terminal                TUPLE;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                LSQBRACKET;
terminal                RSQBRACKET;
terminal                COLON;
terminal                COMMA;
terminal                DOT;
terminal                INPUTOP;
terminal                OUTPUTOP;
terminal                ASSIGN;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                AND;
terminal                OR;
terminal                NOT;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                GREATER;
terminal                GREATEREQ;
terminal                LESS;
terminal                LESSEQ;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                READ;
terminal                WRITE;
terminal                RETURN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal LinkedList       varDeclList;
non terminal FctnDeclNode     fctnDecl;
non terminal TupleDeclNode    tupleDecl;
non terminal DeclListNode     tupleBody;
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FctnBodyNode     fctnBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignExpNode    assignExp;
non terminal CallExpNode      fctnCall;
non terminal ExpNode          exp;
non terminal ExpNode          term;
non terminal LinkedList       actualList;
non terminal TypeNode         type;
non terminal ExpNode          loc;
non terminal IdNode           id;
 
 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;

precedence left OR;

precedence left AND;

precedence nonassoc EQUALS, NOTEQUALS, GREATER, GREATEREQ,
LESS, LESSEQ;

precedence left PLUS, PLUSPLUS, MINUS, MINUSMINUS;

precedence left TIMES, DIVIDE;

precedence nonassoc NOT;

precedence left COLON;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | fctnDecl:f
                {: RESULT = f;
                :}
                ;

varDeclList     ::= varDeclList:vl varDecl:v
                {: vl.addLast(v);
                   RESULT = vl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<VarDeclNode>();
                :}
                ;

varDecl         ::= type:t id:i DOT
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NON_TUPLE);
                :}
                ;

fctnDecl        ::= type:t id:i formals:fl fctnBody:fb
                {: 
                   RESULT = new FctnDeclNode(t, i, fl, fb);
                :}
                ;

formals         ::= LCURLY RCURLY
                {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                | LCURLY formalsList:fl RCURLY
                {: RESULT = new FormalsListNode(fl);
                :}
                ;

formalsList     ::= formalDecl:f
                {: LinkedList<FormalDeclNode> fl = new LinkedList<>();
                   fl.addLast(f);
                   RESULT = fl;
                :}
                | formalDecl:f COMMA formalsList:fl
                {: fl.addLast(f); 
                  RESULT = fl;
                :}
                ;

formalDecl      ::= type:t id:i
                {: RESULT = new FormalDeclNode(t, i);
                :}
                ;

fctnBody        ::= LSQBRACKET varDeclList:vl stmtList:sl RSQBRACKET
                {: 
                  RESULT = new FctnBodyNode(new DeclListNode(vl), new StmtListNode(sl));
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {: sl.addLast(s); 
                  RESULT = sl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;
	
stmt            ::= assignExp:a DOT
                {: RESULT = new AssignStmtNode(a);
                :}
                | fctnCall:c DOT
                {: RESULT = new CallStmtNode(c);
                :}
                | loc:l PLUSPLUS DOT
                {: RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS DOT
                {: RESULT = new PostDecStmtNode(l);
                :}
                | IF exp:e LSQBRACKET varDeclList:vl stmtList:sl RSQBRACKET
                {: RESULT = new IfStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | IF exp:e LSQBRACKET varDeclList:vl1 stmtList:sl1 RSQBRACKET ELSE LSQBRACKET varDeclList:vl2 stmtList:sl2 RSQBRACKET
                {: RESULT = new IfElseStmtNode(e, new DeclListNode(vl1), new StmtListNode(sl1), new DeclListNode(vl2), new StmtListNode(sl2));
                :}
                | WHILE exp:e LSQBRACKET varDeclList:vl stmtList:sl RSQBRACKET
                {: RESULT = new WhileStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | READ INPUTOP loc:l DOT
                {: RESULT = new ReadStmtNode(l);
                :}
                | WRITE OUTPUTOP exp:e DOT
                {: RESULT = new WriteStmtNode(e);
                :}
                | RETURN exp:e DOT
                {: RESULT = new ReturnStmtNode(e);
                :}
                | RETURN DOT
                {:RESULT = new ReturnStmtNode(null);
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:e
                {: RESULT = new AssignExpNode(l, e);
                :}
                ;   

exp             ::= assignExp:e
                {: RESULT = e;
                :}
                | exp:e1 PLUS exp:e2
                {: RESULT = new PlusNode(e1, e2);
                :}
                | exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1,e2);
                :}
                | exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1,e2);
                :}
                | exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1,e2);
                :}
                | exp:e1 EQUALS exp:e2
                {: RESULT = new EqualsNode(e1,e2);
                :}
                | exp:e1 NOTEQUALS exp:e2
                {: RESULT = new NotEqualsNode(e1,e2);
                :}
                | exp:e1 GREATER exp:e2
                {: RESULT = new GreaterNode(e1,e2);
                :}
                | exp:e1 GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e1,e2);
                :}
                | exp:e1 LESS exp:e2
                {: RESULT = new LessNode(e1,e2);
                :}
                | exp:e1 LESSEQ exp:e2
                {: RESULT = new LessEqNode(e1,e2);
                :}
                | exp:e1 AND exp:e2
                {: RESULT = new AndNode(e1,e2);
                :}
                | exp:e1 OR exp:e2
                {: RESULT = new OrNode(e1,e2);
                :}
                | NOT exp:e
                {: RESULT = new NotNode(e);
                :}
                | MINUS term:t
                {: RESULT = new UnaryMinusNode(t);
                :}
                | term:t
                {: RESULT = t;
                :}
                ;             

term            ::= loc:l
                {: RESULT = l;
                :}
                | TRUE:t
                {: RESULT = new TrueNode(t.lineNum, t.charNum);
                :}
                | FALSE:f
                {: RESULT = new FalseNode(f.lineNum, f.charNum);
                :}
                | INTLITERAL:i
                {: RESULT = new IntLitNode(i.lineNum, i.charNum, i.intVal);
                :}
                | STRLITERAL:s
                {: RESULT = new StringLitNode(s.lineNum, s.charNum, s.strVal);
                :}
                | LPAREN exp:e RPAREN
                {: RESULT = e;
                :}
                | fctnCall:c
                {: RESULT = c;
                :}
                ;

fctnCall        ::=  id:i LPAREN RPAREN
                {: RESULT = new CallExpNode(i);
                :}
                | id:i LPAREN actualList:al RPAREN
                {: RESULT = new CallExpNode(i, new ExpListNode(al));
                :}
                ;
	
actualList      ::= exp:e
                {: LinkedList<ExpNode> al = new LinkedList<>();
                   al.addLast(e);
                   RESULT = al;
                :}
                | actualList:al COMMA exp:e
                {: al.addLast(e);
                  RESULT = al;
                :}
                ;

type            ::= LOGICAL
                {: RESULT = new LogicalNode();
                :}
                | INTEGER
                {: RESULT = new IntegerNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

loc             ::= id:i
                {: RESULT = i;
                :}
                | loc:l COLON id:i
                {:
                  RESULT = new TupleAccessExpNode(l, i);
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;
				